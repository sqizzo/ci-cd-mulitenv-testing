name: Deploy to Staging

on:
  push:
    branches: [dev] # Trigger saat push ke branch dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Server Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/evently-server:staging ./server
          docker push ${{ secrets.DOCKER_USERNAME }}/evently-server:staging

      - name: Build and Push Client Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/evently-client:staging ./client
          docker push ${{ secrets.DOCKER_USERNAME }}/evently-client:staging

      - name: Deploy to EC2 (Staging)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_STAGING_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Pull latest images
            docker pull ${{ secrets.DOCKER_USERNAME }}/evently-server:staging
            docker pull ${{ secrets.DOCKER_USERNAME }}/evently-client:staging

            # Stop and remove existing containers
            docker stop evently-server 2>/dev/null || true
            docker rm evently-server 2>/dev/null || true
            docker stop evently-client 2>/dev/null || true
            docker rm evently-client 2>/dev/null || true

            # Create environment file for server
            cat > server.env << EOF
            PORT=${{ secrets.PORT }}
            HOSTNAME=${{ secrets.HOSTNAME }}
            MONGO_URL=${{ secrets.MONGO_URL }}
            CLIENT_URL=${{ secrets.CLIENT_URL }}
            NODEMAILER_HOST=${{ secrets.NODEMAILER_HOST }}
            NODEMAILER_PORT=${{ secrets.NODEMAILER_PORT }}
            NODEMAILER_UNAME=${{ secrets.NODEMAILER_UNAME }}
            NODEMAILER_PASS=${{ secrets.NODEMAILER_PASS }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            GOOGLE_CLIENTID=${{ secrets.GOOGLE_CLIENTID }}
            GOOGLE_CLIENTSECRET=${{ secrets.GOOGLE_CLIENTSECRET }}
            CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
            CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
            EOF

            # Start server container using env file
            docker run -d \
              --name evently-server \
              --env-file server.env \
              -p 5000:5000 \
              --health-cmd="curl -f http://localhost:5000/api/health || exit 1" \
              --health-interval=30s \
              --health-timeout=5s \
              --health-retries=3 \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/evently-server:staging

            # Start client container
            docker run -d \
              --name evently-client \
              -p 80:80 \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/evently-client:staging

            # Clean up environment file
            rm server.env

            # Show running containers
            docker ps
